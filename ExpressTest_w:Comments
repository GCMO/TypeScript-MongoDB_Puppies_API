const express = require('express');

const app = express();

const presidents = [
  {
    id: '43',
    from: '2001',
    to: '2009',
    name: 'George W. Bush',
  },
  {
    id: '44',
    from: '2009',
    to: '2017',
    name: 'Barack Obama',
  },
  {
    id: '45', from: '2017', to: '2021', name: 'Donald Trump',
  },
  { id: '46', from: '2021', name: 'Joe Biden' },
];
app.use(express.urlencoded({ extended: false }));
app.use(express.json());

// You don't need to understand how this code works for now
// just use nextId(presidents) to get the next id when adding a president

const nextId = presidentsArray => {
  // eslint-disable-next-line max-len
  const highestId = presidentsArray.reduce(
    (accumulator, currentValue) => (currentValue.id > accumulator ? currentValue.id : accumulator),
    0,
  );
  return Number.parseInt(highestId, 10) + 1;
};

// // GET ALL
// app.get('/api/presidents', (req, res) => {
//   try {
//     res.json(presidents);
//   } catch (err) {
//     res.status(500).json({ error: err.message });
//   }
// });

// // GET ONE
// app.get('/api/presidents/:id', async (req, res) => {
//   try {
//     const sendData = await president =>  presidents.find(president.id === req.params.id);
//     if (sendData) {
//       res.json(sendData);
//     }
//     res.status(400).json({ error: 'Error Message: Please check your querry' });
//   } catch (err) {
//     res.status(500).json({ error: err.message });
//   }
// });

// // POST
// app.post('api/presidents', async (req, res) => {
//   try {
//     const sendData = await president => presidents.find()
//   } catch (err) {
//     res.status(500)
//   }
// })
// // PUT
// app.put('api/presidents/', async (req, res) {
//   try {     await

//   } catch (err){
//    res.status(500).json({ error: err.message })
//   }
// })
// // DELETE
// app.delete('api/presidents', async (req, res))

// GET MANY
app.get('/api/presidents', (req, res) => {
  try {
    res.json(presidents);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// GET ONE
app.get('/api/presidents/:id', (req, res) => {
  try { // set sentData to await and find the id in the presidents array
    const sentData = presidents.find(p => p.id === req.params.id);
    if (sentData) { // if sendData is true then return sentData in json format
      return res.json(sentData);
    } // otherwise send a 404 error in json with the string error message
      return res.status(404).json({ error: 'President not found, check your query params' });
    } catch (err) {
    return res.status(500).json({ error: err.message });
  }
});

// POST
app.post('/api/presidents/', async (req, res) => {
  try {
    const sentData = req.body;
    // console.log ('BBBB', sentData);
    await res.header('location', '/api/presidents/');
    // if the name in the object is not sentData or is not found then
    // return a 400 client error - bad request
    if (!sentData.name) {
      return res.status(400).json();
    } // define sendData.it as nextid of presidents
    sentData.id = nextId(presidents);
    // Object.assign(sentData.
    presidents.push(sentData); // then push sendData as the last in presidents array
    return res.status(201).json(sentData); // and return a 201 created
  } catch (err) { // or an error
    throw res.status(500).json({ error: err.message });
  }
});

// PUT
app.put('/api/presidents/:id', async (req, res) => {
  // create a var that contains one object of the array
  const sentData = req.body;
  // console.log ('PPPP', sentData);
  // the validator is as above, if not found return 400
  if (!sentData.name) {
    res.status(400).json({ error: 'Please check your query params' });
    return;
  }
  const president = await presidents.find(p => p.id === req.params.id);
  president.from = sentData.from;
  president.to = sentData.to;
  president.name = sentData.name;
  res.json(president);
});

// DELETE
app.delete('/api/presidents/:id', (req, res) => {
  // create a var that stores index of the elements in presidents
  const presidentIndex = presidents.findIndex(president => president.id === req.params.id);
  // if prsidentIndex is not found then return 404
  if (presidentIndex === -1) {
    res.sendStatus(404);
    return;
  }
  // otherwise start at presidentIndex and remove 1 element
  presidents.splice(presidentIndex, 1);
  // and finally send a complete successfully status without need for sending data
  res.sendStatus(204);
});

// Don't change the code below this line
module.exports.app = app;
module.exports.db = () => presidents;
module.exports.nextId = () => nextId(presidents);

// See http://www.marcusoft.net/2015/10/eaddrinuse-when-watching-tests-with-mocha-and-supertest.html
if (!module.parent) {
  app.listen(3000, () => console.log('Server running on 3000'));
}
